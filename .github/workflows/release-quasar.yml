# This is the final, most reliable step to push to your GitHub repo
      - name: Push to GitHub Distribution Repository
        env:
          # Secret for the Deploy Key
          DEPLOY_KEY: ${{ secrets.QUASAR_DEPLOY_KEY }}
          # Secrets for the Git commit author (optional)
          GIT_USER: ${{ secrets.GIT_COMMIT_USER || 'GitHub Actions' }}
          GIT_EMAIL: ${{ secrets.GIT_COMMIT_EMAIL || 'actions@github.com' }}
        run: |
          # --- 1. PREPARE THE CLEAN TAG ---
          ORIGINAL_TAG=${{ github.ref_name }}
          CLEAN_TAG=$(echo $ORIGINAL_TAG | sed -e 's/-quasar$//')
          echo "Original Tag: $ORIGINAL_TAG, Clean Tag: $CLEAN_TAG"

          # --- 2. SET UP SSH FOR PUSHING ---
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${DEPLOY_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          # --- 3. CONFIGURE GIT AND CLONE ---
          echo "Configuring Git..."
          git config --global user.name "${GIT_USER}"
          git config --global user.email "${GIT_EMAIL}"

          echo "Cloning destination repository..."
          git clone git@github.com:eighteen73/quasar.git ../quasar-dist

          # --- 4. SYNC FILES ---
          echo "Syncing files to destination..."
          rsync -av --delete . ../quasar-dist/ \
            --exclude ".editorconfig" \
            --exclude ".git" \
            --exclude ".github" \
            --exclude ".gitignore" \
            --exclude ".playground" \
            --exclude "config/theme-json" \
            --exclude "node_modules" \
            --exclude "src" \
            --exclude "vendor" \
            --exclude "package.json" \
            --exclude "package-lock.json" \
            --exclude "phpcs.xml" \
            --exclude "webpack.config.js"

          cd ../quasar-dist

          # --- 5. COMMIT, TAG, AND PUSH ---
          echo "Committing, tagging, and pushing..."
          git add .

          if ! git diff --staged --quiet; then
            git commit -m "Release $CLEAN_TAG"
          else
            echo "No changes to commit."
          fi

          # Create the new, clean tag
          git tag -f $CLEAN_TAG

          echo "Pushing to destination..."
          git push origin main
          # Push the new tag, deleting the old one on the remote if it exists
          git push origin $CLEAN_TAG --force
