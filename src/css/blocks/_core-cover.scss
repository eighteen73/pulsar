@use "../tools" as *;

.wp-block-cover {
	align-items: center;
	background-position: center center;
	display: flex;
	justify-content: center;
	min-height: 430px;
	padding: space(6);
	position: relative;

	// The coloured overlay for the block.
	&__background {
		bottom: 0;
		left: 0;
		opacity: 0.5;
		position: absolute;
		right: 0;
		top: 0;
		z-index: 1;
	}

	.has-background-dim {

		// Set a default background colour if one isn't set.
		&:where(:not([class*="-background-color"])) {
			background-color: color(black);
		}

		// Gradients should have no background colour.
		&:where(.has-background-gradient) {
			background-color: transparent;
		}

		&::before {
			background-color: inherit;
			content: "";
		}
	}

	// The background overlay opacity options.
	@for $i from 1 through 10 {
		.has-background-dim-#{ $i * 10 } {
			opacity: $i * 0.1;
		}
	}

	// The image/video background.
	&__video-background,
	&__image-background {
		border: none;
		bottom: 0;
		box-shadow: none;
		height: 100%;
		left: 0;
		margin: 0;
		max-height: none;
		max-width: none;
		object-fit: cover;
		outline: none;
		padding: 0;
		position: absolute;
		right: 0;
		top: 0;
		width: 100%;
		z-index: 0;
	}

	// The blocks inner blocks.
	&__inner-container {
		color: color(white);
		position: relative;
		z-index: 1;

		.has-custom-content-position & {
			margin: 0;
			width: auto;
		}

		// A light background colour is set.
		.is-light & {
			color: color(black);
		}

		p,
		h1,
		h2,
		h3,
		h4,
		h5,
		h6 {

			&:where(:not(.has-text-color)) {
				color: inherit;
			}
		}
	}

	// The fixed option.
	.has-parallax {
		background-attachment: fixed;
		background-repeat: no-repeat;
		background-size: cover;

		@supports (-webkit-overflow-scrolling: touch) {
			background-attachment: scroll;
		}

		// Remove the appearance of scrolling based on OS-level animation preferences.

		@media (prefers-reduced-motion: reduce) {
			background-attachment: scroll;
		}
	}

	// The repeated option.
	.is-repeated {
		background-repeat: repeat;
		background-size: auto;
	}

	// Apply max-width to floated items that have no intrinsic width
	&.alignleft,
	&.alignright {
		max-width: calc(theme(layout, content-size) / 2);
		width: 100%;
	}

	// Aligned cover blocks should not use our global alignment rules
	&.aligncenter,
	&.alignleft,
	&.alignright {
		display: flex;
	}

	&.is-position-top-left {
		align-items: flex-start;
		justify-content: flex-start;
	}

	&.is-position-top-center {
		align-items: flex-start;
		justify-content: center;
	}

	&.is-position-top-right {
		align-items: flex-start;
		justify-content: flex-end;
	}

	&.is-position-center-left {
		align-items: center;
		justify-content: flex-start;
	}

	&.is-position-center-center {
		align-items: center;
		justify-content: center;
	}

	&.is-position-center-right {
		align-items: center;
		justify-content: flex-end;
	}

	&.is-position-bottom-left {
		align-items: flex-end;
		justify-content: flex-start;
	}

	&.is-position-bottom-center {
		align-items: flex-end;
		justify-content: center;
	}

	&.is-position-bottom-right {
		align-items: flex-end;
		justify-content: flex-end;
	}
}
