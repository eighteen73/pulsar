@use "../tools" as *;

///
/// As navigation is complex, here is a breakdown of the different parts:
///
/// 1. Standard non-responsive navigation.
/// 1a. Special rules for when the menu is not hidden by default.
/// 3. Responsive navigation.
/// 4. Sliding style submenu.
/// 5. Accordion style submenu.
///

$responsive-breakpoint: --lg;

.has-modal-open {
	overflow: hidden;
}

///
/// 1. Standard non-responsive navigation.
///
.wp-block-navigation {
	$block: &;

	// Custom properties for layout style cascade: default values.
	--navigation-layout-justification-setting: flex-start;
	--navigation-layout-direction: row;
	--navigation-layout-wrap: wrap;
	--navigation-layout-justify: flex-start;
	--navigation-layout-align: center;

	// Set the height of the mobile menu
	--navigation-height: 100dvh;

	// A default gap between menu items
	--navigation-gap: var(--wp--preset--spacing--md);

	// A default gap between an icon
	--navigation-item-gap: var(--wp--preset--spacing--2-xs);

	// Set a consistent size for icons.
	--navigation-icon-size: 10px;

	// Set a consistent width for submenus
	--navigation-submenu-width: 200px;

	gap: var(--navigation-gap);

	&.is-vertical {
		--navigation-layout-direction: column;
		--navigation-layout-justify: initial;
		--navigation-layout-align: flex-start;
	}

	&.no-wrap {
		--navigation-layout-wrap: nowrap;
	}

	&.items-justified-center {
		--navigation-layout-justification-setting: center;
		--navigation-layout-justify: center;

		&.is-vertical {
			--navigation-layout-align: center;
		}
	}

	&.items-justified-right {
		--navigation-layout-justification-setting: flex-end;
		--navigation-layout-justify: flex-end;

		&.is-vertical {
			--navigation-layout-align: flex-end;
		}
	}

	&.items-justified-space-between {
		--navigation-layout-justification-setting: space-between;
		--navigation-layout-justify: space-between;
	}

	// The <ul> element
	&__container {
		align-items: var(--navigation-layout-align, initial);
		display: flex;
		flex-direction: var(--navigation-layout-direction, initial);
		flex-wrap: var(--navigation-layout-wrap, wrap);
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		justify-content: var(--navigation-layout-justify, initial);
		list-style: none;
		margin: 0;
		padding: 0;

		&:only-child {
			flex-grow: 1;
		}
	}

	// The menu <li> element
	&-item {
		align-items: center;
		background-color: inherit;
		display: flex;
		flex-wrap: wrap;
		gap: var(--navigation-item-gap);
		justify-content: space-between;

		&:where(.has-child) {
			position: relative;
		}
	}

	// A single menu link/button
	&-item__content {
		background-color: inherit;
		border: 0;
		color: inherit;
		cursor: pointer;
		display: block;
		flex: 1 1 0%;
		text-align: left;
		text-decoration: none;
	}

	// A submenu container
	&__submenu-container {
		background-color: inherit;
		color: inherit;
		display: flex;
		flex-direction: column;
		left: 0;
		min-width: var(--navigation-submenu-width);
		position: absolute;
		top: 100%;
		transition: all var(--wp--custom--transition-duration--quick);
		visibility: hidden;
		width: 100%;
		z-index: 1;

		// Hide empty submenus
		&:empty {
			display: none;
		}

		// If the submenu has a background, remove padding
		&.has-background {
			padding: 0;
		}

		// Nested submenus should be positioned to the right
		.wp-block-navigation__submenu-container {
			left: 100%;
			top: 0;
		}
	}

	// Nested children
	:where(.has-child) :where(.has-child) {

		// Icon should point to the right for nested submenus when the menu is not hidden by default
		.wp-block-navigation__submenu-icon,
		.wp-block-navigation__submenu-icon[aria-expanded="true"] {
			transform: rotate(-90deg);
		}
	}

	/// Display a submenu when the button is clicked or when the parent is hovered when open-on-hover-click is set
	:where([aria-expanded="true"]) ~ .wp-block-navigation__submenu-container {
		@include show-submenu;
	}

	// The submenu icon
	// This can either be a separate button or part of the menu item, depending on the CMS options set.
	&__submenu-icon {
		align-items: center;
		align-self: center;
		background-color: inherit;
		border: 0;
		color: currentcolor;
		display: flex;
		font-size: inherit;
		justify-content: center;
		padding: 0;

		svg {
			height: var(--navigation-icon-size);
			stroke: currentcolor;
			width: var(--navigation-icon-size);
		}
	}

	///
	/// 1a. Special rules for when the menu is not hidden by default.
	/// These are deliberately high specificity to override the default styles.
	///
	.wp-block-navigation__responsive-container:not(.hidden-by-default) {

		// When the submenu is not hidden by default, style as a dropdown
		.wp-block-navigation__submenu-container {
			@media ($responsive-breakpoint) {
				align-items: normal;
				height: 0;
				left: 0;
				min-width: var(--navigation-submenu-width);
				opacity: 0;
				position: absolute;
				top: 100%;
				transform: none;
				width: 0;
				z-index: 2;
			}

			// Nested submenus should be positioned to the right
			.wp-block-navigation__submenu-container {
				@media ($responsive-breakpoint) {
					left: 100%;
					top: 0;
				}
			}
		}

		.wp-block-navigation__submenu-icon,
		.wp-block-navigation__submenu-icon[aria-expanded="true"] {
			@media ($responsive-breakpoint) {
				transform: rotate(0);
			}
		}

		.has-child {
			@media ($responsive-breakpoint) {
				position: relative;
			}
		}

		// Nested children
		:where(.has-child) :where(.has-child) {

			// Icon should point to the right for nested submenus when the menu is not hidden by default
			.wp-block-navigation__submenu-icon,
			.wp-block-navigation__submenu-icon[aria-expanded="true"] {
				@media ($responsive-breakpoint) {
					transform: rotate(-90deg);
				}
			}
		}

		// Hide the submenu header on desktop
		.wp-block-navigation-submenu__header {
			@media ($responsive-breakpoint) {
				display: none;
			}
		}
	}
}

///
/// 2. Responsive navigation.
///
/// Behaviour is controlled by the overlay menu option in the editor.
///
/// All styles for responsive behaviour should be within this block
/// Markup should be structured as follows:
///
/// <nav class="wp-block-navigation is-responsive">
/// 	<button class="wp-block-navigation__responsive-container-open">
/// 	<div class="wp-block-navigation__responsive-close">
/// 		<div class="wp-block-navigation__responsive-dialog">
/// 			<button class="wp-block-navigation__responsive-container-close">
/// 			<div class="wp-block-navigation__responsive-container-content">
/// 				<ul class="wp-block-navigation__container">
/// 					<li class="wp-block-navigation-item">
/// 						<a class="wp-block-navigation-item__content">
/// 							<span class="wp-block-navigation-item__label">
///						<li class="wp-block-navigation-item wp-block-navigation-submenu has-child">
///							<a class="wp-block-navigation-item__content">
/// 						<button class="wp-block-navigation-submenu__toggle">
/// 						<ul class="wp-block-navigation__submenu-container">
/// 							<li class="wp-block-navigation-submenu__header">
/// 								<button class="wp-block-navigation-submenu__back">
/// 								<span class="wp-block-navigation-submenu__label">
/// 								<a class="wp-block-navigation-submenu__all">
///
///
.wp-block-navigation:where(.is-responsive) {

	// The navigation toggle button directly in the <nav> element
	.wp-block-navigation__responsive-container-open {
		align-items: center;
		background-color: transparent;
		border: 0;
		cursor: pointer;
		display: flex;
		font-family: inherit;
		font-size: inherit;
		font-weight: inherit;
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		justify-content: center;
		padding: 0;

		// If overlay menu isn't set to always, hide the button on desktop
		&:where(:not(.always-shown)) {
			@media ($responsive-breakpoint) {
				display: none;
			}
		}

		svg {
			&:first-child:where(:not(:only-child)) {
				:where(.has-modal-open) & {
					display: none;
				}
			}

			&:last-child:where(:not(:only-child)) {
				display: none;

				:where(.has-modal-open) & {
					display: block;
				}
			}
		}
	}

	// The main container for the navigation
	//  Directly  within the <nav> element
	.wp-block-navigation__responsive-container {
		background-color: inherit;
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		height: var(--navigation-height);
		left: 0;
		opacity: 0;
		position: absolute;
		top: 100%;
		transition: all var(--wp--custom--transition-duration--quick);
		visibility: hidden;
		width: 100%;
		z-index: 1;

		// Class added when menu is opened
		// This is where the overlay can be animated differently if needed.
		&:where(.is-menu-open) {
			opacity: 1;
			visibility: visible;
		}

		// When not hidden by default option, show the navigation
		&:where(:not(.hidden-by-default):not(.is-menu-open)) {
			@media ($responsive-breakpoint) {
				background-color: inherit;
				display: block;
				height: auto;
				opacity: 1;
				position: static;
				visibility: visible;
				width: 100%;
				z-index: auto;
			}
		}

		// These are required due to the way colors are applied.
		&:not(.is-menu-open.is-menu-open) {
			background-color: inherit !important; // stylelint-disable-line declaration-no-important
			color: inherit !important; // stylelint-disable-line declaration-no-important
		}

		// The default close button
		// Style wise we tend to hide this and use the open button as a toggle instead.
		.wp-block-navigation__responsive-container-close {
			display: none;
		}

		// When the menu is always hidden, assume it's a modal and set the position to fixed
		&:where(.hidden-by-default) {
			inset: 0;
			position: fixed;

			.wp-block-navigation__responsive-container-close {
				display: flex;
				position: absolute;
				right: 0;
				top: 0;
			}
		}
	}

	// Another wrapper
	.wp-block-navigation__responsive-close {
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		height: 100%;
		width: 100%;
	}

	// Another wrapper
	.wp-block-navigation__responsive-dialog {
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		height: 100%;
	}

	// The main <ul> element
	.wp-block-navigation__container {
		--navigation-layout-direction: column;
		--navigation-layout-align: stretch;
		--navigation-layout-wrap: nowrap;
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		height: 100%;

		@media ($responsive-breakpoint) {
			--navigation-layout-direction: row;
			--navigation-layout-align: initial;
			--navigation-layout-wrap: wrap;
			height: auto;
		}
	}

	// When navigation is set to always be a hamburger, always set as vertical
	:where(.hidden-by-default) .wp-block-navigation__container {
		--navigation-layout-direction: column;
		--navigation-layout-align: stretch;
		--navigation-layout-wrap: nowrap;
	}

	.wp-block-navigation__submenu-container {
		background-color: inherit;
	}

	// Display a submenu when the button is clicked
	// This is important and controls both the mobile and desktop behaviour.
	.wp-block-navigation-submenu__toggle[aria-expanded="true"] ~ .wp-block-navigation__submenu-container {
		@include show-submenu;
	}

	// The last wrapper before the <ul> element
	.wp-block-navigation__responsive-container-content {
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		height: 100%;
	}

	.wp-block-navigation-item {
		column-gap: var(--navigation-item-gap);
	}

	.wp-block-navigation-submenu__header {
		display: flex;
		flex-wrap: nowrap;
		gap: var(--navigation-item-gap);
		justify-content: space-between;

		svg {
			height: var(--navigation-icon-size);
			width: var(--navigation-icon-size);
		}
	}

	.wp-block-navigation-submenu__back {
		align-items: center;
		background-color: transparent;
		border: 0;
		color: inherit;
		cursor: pointer;
		display: flex;
		flex: 0 0 auto;
		font-size: inherit;
		gap: var(--navigation-item-gap);
		margin-right: auto;
		padding: 0;
	}

	.wp-block-navigation-submenu__label {
		flex: 0 0 auto;
		font-size: inherit;
	}

	.wp-block-navigation-submenu__all {
		align-items: center;
		background-color: transparent;
		border: 0;
		color: inherit;
		cursor: pointer;
		display: flex;
		flex: 0 0 auto;
		font-size: inherit;
		gap: var(--navigation-item-gap);
		margin-left: auto;
		padding: 0;
	}

	///
	/// 3. Sliding style submenu.
	///
	&:where(.is-submenu-style-slide) {

		// Rotate the icon to point to the way the submenu will slide in.
		:where(.wp-block-navigation__submenu-icon) {
			transform: rotate(-90deg);
		}

		:where(.wp-block-navigation__submenu-container) {
			bottom: 0;
			height: 100%;
			left: 0;
			overflow: hidden;
			position: absolute;
			right: 0;
			top: 0;
			transform: translateX(-100%);

		}

		:where(.has-child) {
			position: static;
		}
	}

	///
	/// 4. Accordion style submenu
	///
	&:where(.is-submenu-style-accordion) {
		.wp-block-navigation__submenu-container {
			min-width: 100%;
			position: static;
		}

		// Rotate the icon to indicate open/close
		.wp-block-navigation__submenu-icon {
			transform: rotate(0);

			&[aria-expanded="true"] {
				transform: rotate(180deg);
			}
		}
	}
}
