@use "../tools" as *;

///
/// As navigation is complex, here is a breakdown of the different parts:
///
/// 1. Standard non-responsive navigation.
/// 2. Responsive navigation.
/// 3. Sliding style submenu.
/// 4. Accordion style submenu.
///

.has-modal-open {
	overflow: hidden;
}

///
/// 1. Standard non-responsive navigation.
///
.wp-block-navigation {
	$block: &;

	// Custom properties for layout style cascade: default values.
	--navigation-layout-justification-setting: flex-start;
	--navigation-layout-direction: row;
	--navigation-layout-wrap: wrap;
	--navigation-layout-justify: flex-start;
	--navigation-layout-align: center;

	// Set the height of the mobile menu
	--navigation-height: 100dvh;

	// A default gap between menu items
	--navigation-gap: var(--wp--preset--spacing--md);

	gap: var(--navigation-gap);

	&.is-vertical {
		--navigation-layout-direction: column;
		--navigation-layout-justify: initial;
		--navigation-layout-align: flex-start;
	}

	&.no-wrap {
		--navigation-layout-wrap: nowrap;
	}

	&.items-justified-center {
		--navigation-layout-justification-setting: center;
		--navigation-layout-justify: center;

		&.is-vertical {
			--navigation-layout-align: center;
		}
	}

	&.items-justified-right {
		--navigation-layout-justification-setting: flex-end;
		--navigation-layout-justify: flex-end;

		&.is-vertical {
			--navigation-layout-align: flex-end;
		}
	}

	&.items-justified-space-between {
		--navigation-layout-justification-setting: space-between;
		--navigation-layout-justify: space-between;
	}

	// The <ul> element
	&__container {
		align-items: var(--navigation-layout-align, initial);
		display: flex;
		flex-direction: var(--navigation-layout-direction, initial);
		flex-wrap: var(--navigation-layout-wrap, wrap);
		gap: inherit;
		justify-content: var(--navigation-layout-justify, initial);
		list-style: none;
		margin: 0;
		padding: 0;

		&:only-child {
			flex-grow: 1;
		}
	}

	// The menu <li> element
	&-item {
		align-items: center;
		background-color: inherit;
		display: flex;
		flex-wrap: wrap;
		justify-content: space-between;

		&:where(.has-child) {
			@media (--lg) {
				position: relative;
			}
		}
	}

	// A single menu link/button
	&-item__content {
		background-color: transparent;
		border: 0;
		color: inherit;
		cursor: pointer;
		display: block;
		flex: 1 1 0%;
		text-align: left;
		text-decoration: none;

		@media (--lg) {
			padding: 0;
		}
	}

	// A submenu container
	&__submenu-container {
		background-color: inherit;
		color: inherit;
		display: none;
		flex-direction: column;
		transition: all var(--wp--custom--transition-duration--quick);
		visibility: hidden;
		width: 100%;
		z-index: 1;

		:not(.hidden-by-default) & {
			align-items: normal;
			background-color: inherit;
			height: 0;
			left: 0;
			min-width: 250px;
			opacity: 0;
			position: absolute;
			top: 100%;
			transform: none;
			width: 0;
			z-index: 2;

			// Display a submenu when the parent is hovered
			.has-child:where(:not(.open-on-click)):hover > & {
				@media (--lg) {
					height: auto;
					min-width: 250px;
					opacity: 1;
					overflow: visible;
					visibility: visible;

					&:where(:not(.wp-block-pulsar-navigation-megamenu__container)) {
						width: auto;
					}
				}
			}
		}

		// Display a submenu when the parent is hovered
		.has-child:where(.open-on-hover-click):hover > & {

		}

		&:empty {
			display: none;
		}

		& & {
			@media (--lg) {
				left: 100%;
				top: 0;
			}
		}

		&.has-background {
			padding: 0;
		}
	}

	// Display a submenu when the button is clicked
	:where([aria-expanded="true"]) ~ .wp-block-navigation__submenu-container {
		display: flex;
		height: auto;
		opacity: 1;
		overflow: visible;
		transform: translateX(0);
		visibility: visible;

		@media (--lg) {
			width: auto;
		}
	}

	// The submenu icon
	&__submenu-icon {
		align-items: center;
		align-self: center;
		background-color: inherit;
		border: 0;
		color: currentcolor;
		display: flex;
		font-size: inherit;
		height: 10px;
		justify-content: center;
		padding: 0;
		width: 10px;

		svg {
			stroke: currentcolor;
			transform: rotate(-90deg);

			@media (--lg) {
				transform: rotate(0);
			}
		}

		// // Icon not on mobile when in a submenu should point right
		// .has-child #{$block}__submenu-container & svg {
		// 	@media (--lg) {
		// 		transform: rotate(-90deg);
		// 	}
		// }
	}
}

///
/// 2. Responsive navigation.
///
/// Behaviour is controlled by the overlay menu option in the editor.
///
/// All styles for responsive behaviour should be within this block
/// Markup should be structured as follows:
///
/// <nav class="wp-block-navigation is-responsive">
/// 	<button class="wp-block-navigation__responsive-container-open">
/// 	<div class="wp-block-navigation__responsive-close">
/// 		<div class="wp-block-navigation__responsive-dialog">
/// 			<button class="wp-block-navigation__responsive-container-close">
/// 			<div class="wp-block-navigation__responsive-container-content">
/// 				<ul class="wp-block-navigation__container">
/// 					<li class="wp-block-navigation-item">
/// 						<a class="wp-block-navigation-item__content">
/// 							<span class="wp-block-navigation-item__label">
///						<li class="wp-block-navigation-item wp-block-navigation-submenu has-child">
///							<a class="wp-block-navigation-item__content">
/// 						<button class="wp-block-navigation-submenu__toggle">
/// 						<ul class="wp-block-navigation__submenu-container">
/// 							<li class="wp-block-navigation-submenu__header">
/// 								<button class="wp-block-navigation-submenu__back">
/// 								<span class="wp-block-navigation-submenu__label">
/// 								<a class="wp-block-navigation-submenu__all">
///
///
.wp-block-navigation:where(.is-responsive) {

	// The navigation toggle button directly in the <nav> element
	.wp-block-navigation__responsive-container-open {
		align-items: center;
		background-color: transparent;
		border: 0;
		cursor: pointer;
		display: flex;
		font-family: inherit;
		font-size: inherit;
		font-weight: inherit;
		gap: inherit;
		justify-content: center;
		padding: 0;

		// If overlay menu isn't set to always, hide the button on desktop
		&:where(:not(.always-shown)) {
			@media (--lg) {
				display: none;
			}
		}

		svg {
			&:first-child:where(:not(:only-child)) {
				:where(.has-modal-open) & {
					display: none;
				}
			}

			&:last-child:where(:not(:only-child)) {
				display: none;

				:where(.has-modal-open) & {
					display: block;
				}
			}
		}
	}

	// The main container for the navigation
	//  Directly  within the <nav> element
	.wp-block-navigation__responsive-container {
		background-color: inherit;
		gap: inherit;
		height: var(--navigation-height);
		left: 0;
		opacity: 0;
		position: absolute;
		top: 100%;
		transition: all var(--wp--custom--transition-duration--quick);
		visibility: hidden;
		width: 100%;
		z-index: 1;

		// Class added when menu is opened
		&:where(.is-menu-open) {
			opacity: 1;
			visibility: visible;
		}

		// When not hidden by default option, show the navigation
		&:where(:not(.hidden-by-default):not(.is-menu-open)) {
			@media (--lg) {
				background-color: inherit;
				display: block;
				height: auto;
				opacity: 1;
				position: static;
				visibility: visible;
				width: 100%;
				z-index: auto;
			}
		}

		// These are required due to the way colors are applied.
		&:not(.is-menu-open.is-menu-open) {
			background-color: inherit !important; // stylelint-disable-line declaration-no-important
			color: inherit !important; // stylelint-disable-line declaration-no-important
		}
	}

	// Another wrapper
	.wp-block-navigation__responsive-close {
		gap: inherit; // Pass the gap to the children so the CMS block spacing is respected
		height: 100%;
		width: 100%;
	}

	// Another wrapper
	.wp-block-navigation__responsive-dialog {
		gap: inherit;
		height: 100%;
	}

	// The main <ul> element
	.wp-block-navigation__container {
		--navigation-layout-direction: column;
		--navigation-layout-align: stretch;
		--navigation-layout-wrap: nowrap;
		gap: 0;
		height: 100%;

		@media (--lg) {
			--navigation-layout-direction: row;
			--navigation-layout-align: initial;
			--navigation-layout-wrap: wrap;
			gap: inherit;
			height: auto;
		}
	}

	// When navigation is set to always be a hamburger, always set as vertical
	:where(.hidden-by-default) .wp-block-navigation__container {
		--navigation-layout-direction: column;
		--navigation-layout-align: stretch;
		--navigation-layout-wrap: nowrap;
	}

	// The default close button
	// Style wise we tend to hide this and use the open button as a toggle instead.
	.wp-block-navigation__responsive-container-close {
		display: none;

		:where(:not(.hidden-by-default):not(.is-menu-open)) & {
			@media (--lg) {
				display: none;
			}
		}
	}

	.wp-block-navigation__submenu-container {
		background-color: inherit;
	}

	// Display a submenu when the button is clicked
	// This is important and controls both the mobile and desktop behaviour.
	.wp-block-navigation-submenu__toggle[aria-expanded="true"] ~ .wp-block-navigation__submenu-container {
		opacity: 1;
		overflow: visible;
		transform: translateX(0);
		visibility: visible;
	}

	// The last wrapper before the <ul> element
	.wp-block-navigation__responsive-container-content {
		gap: inherit;
		height: 100%;
	}

	.wp-block-navigation-item {
		column-gap: var(--wp--preset--spacing--2-xs);
	}

	.wp-block-navigation-submenu__header {
		display: flex;
		flex-wrap: nowrap;
		gap: var(--wp--preset--spacing--2-xs);
		justify-content: space-between;

		svg {
			height: 16px;
			width: 16px;
		}
	}

	.wp-block-navigation-submenu__back {
		align-items: center;
		background-color: transparent;
		border: 0;
		color: inherit;
		cursor: pointer;
		display: flex;
		flex: 0 0 auto;
		font-size: inherit;
		gap: var(--wp--preset--spacing--2-xs);
		margin-right: auto;
		padding: 0;
	}

	.wp-block-navigation-submenu__label {
		flex: 0 0 auto;
		font-size: inherit;
	}

	.wp-block-navigation-submenu__all {
		align-items: center;
		background-color: transparent;
		border: 0;
		color: inherit;
		cursor: pointer;
		display: flex;
		flex: 0 0 auto;
		font-size: inherit;
		gap: var(--wp--preset--spacing--2-xs);
		margin-left: auto;
		padding: 0;
	}

	///
	/// 3. Sliding style submenu.
	///
	&:where(.has-submenu-back) {
		.wp-block-navigation__submenu-icon {

			// Rotate the icon to point to the way the submenu will slide in.
			svg {
				transform: rotate(-90deg);
			}
		}

		.wp-block-navigation__submenu-container {
			display: flex;
			flex-direction: column;
			height: 100%;
			left: 0;
			overflow: hidden;
			position: absolute;
			right: 0;
			top: 0;
			transform: translateX(-100%);
			transition: all var(--wp--custom--transition-duration--quick);
			visibility: hidden;
			z-index: 1;

			&.has-background {
				padding: 0;
			}
		}
	}

	///
	/// 4. Accordion style submenu
	///
	&:not(.has-submenu-back) {
		.wp-block-navigation__submenu-container {
			height: auto;
			position: static;
		}

		.wp-block-navigation__submenu-icon {
			svg {
				transform: rotate(0);
			}
		}

		.wp-block-navigation-submenu__toggle[aria-expanded="true"] {
			svg {
				transform: rotate(180deg);
			}
		}
	}

	// Hide the submenu header on desktop as long as the menu is not hidden by default (always hamburger).
	&:where(:not(.hidden-by-default)) .wp-block-navigation-submenu__header {
		@media (--lg) {
			display: none;
		}
	}

	// When there is a seperate
	// :where(.open-on-hover-click) .wp-block-navigation-submenu__toggle {
	// 	aspect-ratio: 1 / 1;
	// 	border: 1px solid;
	// 	cursor: pointer;
	// 	height: 100%;
	// 	margin: 0;
	// 	width: auto;

	// 	@media (--lg) {
	// 		aspect-ratio: unset;
	// 		border: unset;
	// 		cursor: unset;
	// 		height: auto;
	// 		width: auto;
	// 	}
	// }
}
