@use "../settings" as *;
@use "sass:map";
@use "sass:list";

/// Adjusts the `--wp--custom--layout--content` css variable,
/// which is used for the container per breakpoint.
/// This lets the container behave like Tailwind, where it
/// snaps to sizes at breakpoints.
/// This should be used on the `<body>` tag.
@mixin container-sizes($sizes...) {
	@each $size in $sizes {
		$breakpoint: map.get($breakpoints, $size);

		@media (--#{$size}) {
			--wp--custom--layout--content: #{$breakpoint};
		}
	}
}

/// This recreates what WordPress adds to blocks
/// when a block is layout constrained.
/// This recreates the `has-global-padding` and `is-layout-constrained`
/// classes and should be applied to the parent element.
@mixin container() {
	padding-left: var(--wp--style--root--padding-left);
	padding-right: var(--wp--style--root--padding-right);

	> :where(:not(.alignleft):not(.alignright):not(.alignfull)) {
		margin-left: auto;
		margin-right: auto;
		max-width: var(--wp--style--global--content-size);
	}
}

/// Add styles for dark mode.
/// Can target both prefers-color-scheme, and
/// via a data attribute on the body.
@mixin dark() {
	@media (prefers-color-scheme: dark) {
		@content;
	}

	[data-mode="dark"] & {
		@content;
	}
}

/// Makes an element visually hidden, but still accessible to keyboards and assistive devices.
/// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility Hiding Content for Accessibility
/// @link http://hugogiraudel.com/2016/10/13/css-hide-and-seek/
///
/// @param {Boolean} $enforce - Use `!important` on applied properties
///
@mixin hide-visually($enforce: false) {
	$important: if($enforce, "!important", null);

	border: 0 #{$important};
	clip: rect(1px, 1px, 1px, 1px) #{$important};
	clip-path: inset(50%) #{$important};
	height: 1px #{$important};
	overflow: hidden #{$important};
	padding: 0 #{$important};
	white-space: nowrap #{$important};
	width: 1px #{$important};
	word-wrap: normal #{$important};
	z-index: 100000; // Above WP toolbar
}

/// This reverses `hide-visually()`.
///
/// @param {Boolean} $enforce - Use `!important` on applied properties.
///
@mixin show-visually($enforce: false) {
	$important: if($enforce, "!important", null);

	clip: auto #{$important};
	clip-path: none #{$important};
	height: auto #{$important};
	overflow: visible #{$important};
	text-decoration: none;
	white-space: normal #{$important};
	width: auto #{$important};
	z-index: 0;
}
